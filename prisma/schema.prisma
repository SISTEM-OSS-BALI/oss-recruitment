// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RecruitmentStage {
  NEW_APLICANT
  SCREENING
  INTERVIEW
  HIRED
  REJECTED
  WAITING
}

enum QuestionEvaluastionType {
  TEXT
  NUMBER
  RATING
  BOOLEAN
  SINGLE_SELECT
  MULTI_SELECT
}

enum QuestionScreeningType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TEXT
}

enum Role {
  ADMIN
  CANDIDATE
}

enum QuestionMatriksType {
  SINGLE_CHOICE
  TEXT
}

enum EvaluationStatus {
  PENDING
  SUBMITTED
}

model Job {
  id           String   @id @default(cuid())
  name         String
  until_at     DateTime
  description  String   @db.LongText
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  is_published Boolean  @default(false)

  location_id String
  location    Location @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  candidate User[]
  Applicant Applicant[]

  @@map("job")
}

model Location {
  id            String          @id @default(cuid())
  name          String
  maps_url      String
  address       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  job           Job[]
  scheduleHired ScheduleHired[]

  @@map("location")
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  name                String
  password            String
  role                Role      @default(CANDIDATE)
  phone               String?
  curiculum_vitae_url String?
  address             String?
  no_identity         String?
  no_identity_url     String?
  gender              String?
  date_of_birth       DateTime?
  photo_url           String?
  portfolio_url       String?
  job_id              String?
  job                 Job?      @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  scheduleHired ScheduleHired[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Applicant Applicant[]

  @@map("user")
}

model Applicant {
  id        String            @id @default(cuid())
  user_id   String
  user      User              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  job_id    String
  job       Job               @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stage     RecruitmentStage? @default(SCREENING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  screeningBaseId String?
  screeningBase   QuestionBaseScreening?    @relation(fields: [screeningBaseId], references: [id], onDelete: SetNull)
  answers         AnswerQuestionScreening[]

  screeningSubmittedAt DateTime?

  mbti_test_id        String?               @unique
  mbti_test           MbtiTest?             @relation("ApplicantMbti", fields: [mbti_test_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  historyCandidate    HistoryCandidate[]
  scheduleInterview   ScheduleInterview[]
  noteInterview       NoteInterview[]
  matriksAnswer       MatriksAnswer[]
  evaluatorAssignment EvaluatorAssignment[]
  OfferingContract    OfferingContract[]

  @@map("applicant")
}

model ScheduleEvaluator {
  schedule_id       String              @id @default(uuid())
  evaluator         Evaluator           @relation("Schedule", fields: [evaluator_id], references: [id], onDelete: Cascade)
  evaluator_id      String
  days              ScheduleDay[]       @relation("TeacherScheduleDays") // Relasi ke hari-hari yang diatur
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  scheduleInterview ScheduleInterview[]

  @@map("schedule_evaluator")
}

model ScheduleDay {
  day_id      String            @id @default(uuid())
  teacher     ScheduleEvaluator @relation("TeacherScheduleDays", fields: [schedule_id], references: [schedule_id], onDelete: Cascade)
  schedule_id String
  day         String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isAvailable Boolean           @default(false)
  times       ScheduleTime[]    @relation("DayScheduleTimes") // Relasi ke waktu-waktu di hari tersebut

  @@map("schedule_day")
}

model ScheduleTime {
  time_id   String      @id @default(uuid())
  day       ScheduleDay @relation("DayScheduleTimes", fields: [day_id], references: [day_id], onDelete: Cascade)
  day_id    String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("schedule_time")
}

model HistoryCandidate {
  id           String           @id @default(cuid())
  applicant_id String
  applicant    Applicant        @relation(fields: [applicant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime         @default(now())
  stage        RecruitmentStage

  @@map("history_candidate")
}

model ScheduleInterview {
  id           String            @id @default(cuid())
  applicant_id String
  applicant    Applicant         @relation(fields: [applicant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedule_id  String
  schedule     ScheduleEvaluator @relation(fields: [schedule_id], references: [schedule_id], onDelete: Cascade)
  is_online    Boolean
  date         DateTime
  meeting_link String?
  start_time   DateTime
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("schedule_interview")
}

model ScheduleHired {
  id           String   @id @default(cuid())
  candidate_id String
  candidate    User     @relation(fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date         DateTime
  start_time   DateTime
  location     Location @relation(fields: [location_id], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  location_id  String

  @@map("schedule_hired")
}

model OfferingContract {
  id           String    @id @default(cuid())
  applicant_id String
  applicant    Applicant @relation(fields: [applicant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  filePath     String
  status       String    @default("SENT")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("offering_contract")
}

model ContractTemplate {
  id        String     @id @default(cuid())
  name      String
  filePath  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  contracts Contract[]

  @@map("contract_template")
}

model Contract {
  id         String           @id @default(cuid())
  templateId String
  template   ContractTemplate @relation(fields: [templateId], references: [id])
  values     Json
  outputPath String
  status     String           @default("CREATED")
  createdAt  DateTime         @default(now())

  @@map("contract")
}

model Posisition {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("position")
}

model MbtiTest {
  id          String   @id @default(cuid())
  test_id     String
  link_url    String?
  is_complete Boolean? @default(false)
  result      String?  @db.LongText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  applicant Applicant? @relation("ApplicantMbti")

  @@map("mbti_test")
}

model Evaluator {
  id            String  @id @default(cuid())
  name          String
  email         String  @unique
  position      String
  link_schedule String?

  is_active  Boolean
  is_default Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedule ScheduleEvaluator[] @relation("Schedule")

  assignments EvaluatorAssignment[]

  @@map("evaluator")
}

model EvaluatorAssignment {
  id              String           @id @default(cuid())
  base_matriks_id String
  evaluatorId     String
  status          EvaluationStatus @default(PENDING) // tracking
  assignedAt      DateTime         @default(now())
  applicant_id    String
  submittedAt     DateTime?
  link_url        String?

  baseMatriks  MatriksBaseQuestion @relation(fields: [base_matriks_id], references: [id], onDelete: Cascade)
  applicant    Applicant           @relation(fields: [applicant_id], references: [id], onDelete: Cascade)
  evaluator    Evaluator           @relation(fields: [evaluatorId], references: [id], onDelete: Cascade)
  answers      EvaluatorReview[]
  overallScore Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("evaluator_assignment")
}

model EvaluatorReview {
  id           String   @id @default(cuid())
  assignmentId String
  questionId   String
  value        Json
  createdAt    DateTime @default(now())

  assignment EvaluatorAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  question   MatriksQuestion     @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, questionId])
  @@map("evaluator_review")
}

model QuestionBaseScreening {
  id   String  @id @default(cuid())
  name String
  desc String?

  questions                QuestionScreening[]
  allowMultipleSubmissions Boolean             @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active    Boolean     @default(true)
  version   Int         @default(1)
  applicant Applicant[]

  @@map("question_base_screening")
}

model QuestionScreening {
  id          String                @id @default(cuid())
  baseId      String
  text        String
  inputType   QuestionScreeningType
  required    Boolean               @default(true)
  order       Int                   @default(0)
  helpText    String?
  placeholder String?

  minLength Int?
  maxLength Int?

  base    QuestionBaseScreening     @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  options QuestionOption[]
  answers AnswerQuestionScreening[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active Boolean @default(true)

  @@map("question_screening")
}

model QuestionOption {
  id         String @id @default(cuid())
  questionId String
  label      String
  value      String
  order      Int    @default(0)

  question   QuestionScreening      @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  selectedBy AnswerSelectedOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active Boolean @default(true)

  @@unique([questionId, value])
  @@index([questionId, order])
  @@map("question_option")
}

model AnswerQuestionScreening {
  id         String @id @default(cuid())
  questionId String

  answerText      String?
  question        QuestionScreening      @relation(fields: [questionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  selectedOptions AnswerSelectedOption[]

  createdAt   DateTime   @default(now())
  applicant   Applicant? @relation(fields: [applicantId], references: [id])
  applicantId String?

  @@index([questionId])
}

model AnswerSelectedOption {
  answerId String
  optionId String

  answer AnswerQuestionScreening @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  option QuestionOption          @relation(fields: [optionId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@id([answerId, optionId])
  @@map("answer_selected_option")
}

model MatriksBaseQuestion {
  id      String          @id @default(cuid())
  name    String
  desc    String?
  columns MatriksColumn[]

  // baris/pertanyaan
  rows MatriksQuestion[] @relation("BaseRows")

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  EvaluatorAssignment EvaluatorAssignment[]

  @@map("matriks_base_question")
}

model MatriksColumn {
  id     String  @id @default(cuid())
  baseId String
  label  String
  value  String
  order  Int     @default(0)
  active Boolean @default(true)

  base MatriksBaseQuestion @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([baseId, value])
  @@index([baseId, order])
  @@map("matriks_column")
}

model MatriksQuestion {
  id          String              @id @default(cuid())
  baseId      String
  text        String
  inputType   QuestionMatriksType // pastikan enum ini mengandung SINGLE_CHOICE
  required    Boolean             @default(true)
  order       Int                 @default(0)
  helpText    String?
  placeholder String?
  maxScore    Float?
  weight      Float?

  base MatriksBaseQuestion @relation("BaseRows", fields: [baseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  matriksQuestionOption MatriksQuestionOption[]
  MatriksAnswer         MatriksAnswer[]
  EvaluatorReview       EvaluatorReview[]

  @@map("question_matriks")
}

model MatriksQuestionOption {
  id         String  @id @default(cuid())
  questionId String
  label      String
  value      String
  order      Int     @default(0)
  active     Boolean @default(true)

  question MatriksQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([questionId, value])
  @@index([questionId, order])
  @@map("matriks_question_option")
}

model MatriksAnswer {
  id          String          @id @default(cuid())
  questionId  String
  answerText  String?
  question    MatriksQuestion @relation(fields: [questionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt   DateTime        @default(now())
  applicant   Applicant?      @relation(fields: [applicantId], references: [id])
  applicantId String?

  @@index([questionId])
}

model NoteInterview {
  id           String @id @default(cuid())
  note         String @db.LongText
  applicant_id String

  applicant Applicant @relation(fields: [applicant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("note_interview")
}
